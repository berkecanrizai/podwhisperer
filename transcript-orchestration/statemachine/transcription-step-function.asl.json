{
  "Comment": "Audio transcription coordination",
  "StartAt": "DefineDefaults",
  "States": {
    "DefineDefaults": {
      "Type": "Pass",
      "Next": "ApplyDefaults",
      "ResultPath": "$.inputDefaults",
      "Parameters": {
        "forceTranscribe": false,
        "forceWhisper": false,
        "bucketName": "${BucketName}"
      }
    },
    "ApplyDefaults": {
      "Type": "Pass",
      "Next": "Define Output Keys",
      "ResultPath": "$",
      "Parameters": {
        "inputs.$": "States.JsonMerge($.inputDefaults, $$.Execution.Input, false)"
      }
    },
    "Define Output Keys": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultPath": "$.outputs",
      "ResultSelector": {
        "keys.$": "$.Payload"
      },
      "Parameters": {
        "FunctionName": "${S3KeysFunctionArn}",
        "Payload": {
          "audioInputKey.$": "$.inputs.audioInputKey"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Parallel"
    },
    "Parallel": {
      "Type": "Parallel",
      "Next": "Merge Parallel Outputs",
      "Branches": [
        {
          "StartAt": "Force Whisper?",
          "States": {
            "Force Whisper?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.inputs.forceWhisper",
                  "BooleanEquals": true,
                  "Next": "CreateSageMakerManifest"
                }
              ],
              "Default": "HeadObject Whisper Output"
            },
            "HeadObject Whisper Output": {
              "Type": "Task",
              "Parameters": {
                "Bucket.$": "$.inputs.bucketName",
                "Key.$": "$.outputs.keys.whisperOutputKey"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:headObject",
              "Next": "Whisper Complete",
              "ResultPath": "$.WhisperHeadObjectResult",
              "Catch": [
                {
                  "ErrorEquals": [
                    "S3.NoSuchKeyException"
                  ],
                  "ResultPath": "$.HeadObjectWhisperOutputCatch",
                  "Comment": "NoSuchKey",
                  "Next": "CreateSageMakerManifest"
                }
              ]
            },
            "CreateSageMakerManifest": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$.Manifest",
              "Parameters": {
                "FunctionName": "${ManifestCreatorFunctionArn}",
                "Payload": {
                  "id.$": "$$.Execution.Name",
                  "audioInputKey.$": "$.inputs.audioInputKey"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "SageMaker CreateTransformJob",
              "ResultSelector": {
                "ManifestKey.$": "$.Payload.manifestKey"
              }
            },
            "SageMaker CreateTransformJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sagemaker:createTransformJob.sync",
              "Parameters": {
                "TransformJobName.$": "$$.Execution.Name",
                "ModelName": "${ModelName}",
                "MaxConcurrentTransforms": 1,
                "BatchStrategy": "SingleRecord",
                "ModelClientConfig": {
                  "InvocationsTimeoutInSeconds": 3600,
                  "InvocationsMaxRetries": 0
                },
                "TransformInput": {
                  "DataSource": {
                    "S3DataSource": {
                      "S3DataType": "ManifestFile",
                      "S3Uri.$": "States.Format('s3://{}/{}', $.inputs.bucketName, $.Manifest.ManifestKey)"
                    }
                  },
                  "ContentType": "application/json"
                },
                "TransformOutput": {
                  "S3OutputPath.$": "States.Format('s3://{}/{}', $.inputs.bucketName, $.outputs.keys.whisperOutputKey)",
                  "Accept": "application/json"
                },
                "TransformResources": {
                  "InstanceCount": 1,
                  "InstanceType": "ml.m4.xlarge"
                }
              },
              "Next": "Whisper Complete"
            },
            "Whisper Complete": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "Force Transcribe?",
          "States": {
            "Force Transcribe?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.inputs.forceTranscribe",
                  "BooleanEquals": true,
                  "Next": "Transcode Audio"
                }
              ],
              "Default": "HeadObject Transcribe Output"
            },
            "HeadObject Transcribe Output": {
              "Type": "Task",
              "Parameters": {
                "Bucket.$": "$.inputs.bucketName",
                "Key.$": "$.outputs.keys.transcribeOutputKey"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:headObject",
              "Next": "Transcribe Complete",
              "ResultPath": "$.WhisperHeadObjectResult",
              "Catch": [
                {
                  "ErrorEquals": [
                    "S3.NoSuchKeyException"
                  ],
                  "Comment": "NoSuchKey",
                  "ResultPath": "$.HeadObjectTranscribeOutputCatch",
                  "Next": "Transcode Audio"
                }
              ]
            },
            "Transcode Audio": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$.TranscodeOutput",
              "ResultSelector": {
                "$.Payload": "$.Payload"
              },
              "Parameters": {
                "FunctionName": "${TranscoderFunctionArn}",
                "Payload": {
                  "audioInputKey.$": "$.inputs.audioInputKey",
                  "audioOutputKey.$": "$.outputs.keys.mp3Key"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Start Transcription Job"
            },
            "Start Transcription Job": {
              "Type": "Task",
              "Parameters": {
                "Media": {
                  "MediaFileUri.$": "States.Format('s3://{}/{}', $.inputs.bucketName, $.outputs.keys.mp3Key)"
                },
                "LanguageCode": "en-GB",
                "OutputBucketName.$": "$.inputs.bucketName",
                "OutputKey.$": "$.outputs.keys.transcribeOutputKey",
                "TranscriptionJobName.$": "$$.Execution.Name",
                "Settings": {
                  "ShowSpeakerLabels": true,
                  "MaxSpeakerLabels": 3
                }
              },
              "Resource": "arn:aws:states:::aws-sdk:transcribe:startTranscriptionJob",
              "Next": "Wait for Transcription Job",
              "ResultSelector": {
                "TranscriptionJobName.$": "$.TranscriptionJob.TranscriptionJobName",
                "TranscriptionJobStatus.$": "$.TranscriptionJob.TranscriptionJobStatus"
              },
              "ResultPath": "$.TranscriptionJob"
            },
            "Wait for Transcription Job": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "GetTranscriptionJob"
            },
            "GetTranscriptionJob": {
              "Type": "Task",
              "Next": "Choice",
              "Parameters": {
                "TranscriptionJobName.$": "$.TranscriptionJob.TranscriptionJobName"
              },
              "Resource": "arn:aws:states:::aws-sdk:transcribe:getTranscriptionJob",
              "ResultSelector": {
                "TranscriptionJobName.$": "$.TranscriptionJob.TranscriptionJobName",
                "TranscriptionJobStatus.$": "$.TranscriptionJob.TranscriptionJobStatus"
              },
              "ResultPath": "$.TranscriptionJob"
            },
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.TranscriptionJob.TranscriptionJobStatus",
                  "StringEquals": "COMPLETED",
                  "Next": "Transcribe Complete",
                  "Comment": "Completed"
                },
                {
                  "Variable": "$.TranscriptionJob",
                  "StringMatches": "FAILED",
                  "Comment": "Fail",
                  "Next": "TranscribeJobFailed"
                }
              ],
              "Default": "Wait for Transcription Job"
            },
            "Transcribe Complete": {
              "Type": "Pass",
              "End": true
            },
            "TranscribeJobFailed": {
              "Type": "Fail"
            }
          }
        }
      ]
    },
    "Merge Parallel Outputs": {
      "Type": "Pass",
      "Next": "Process Transcripts",
      "ResultPath": "$",
      "Parameters": {
        "inputs.$": "$[0].inputs",
        "outputs.$": "$[0].outputs"
      }
    },
    "Process Transcripts": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "InputPath": "$",
      "OutputPath": "$",
      "ResultPath": "$.TranscriptProcessorResult",
      "Parameters": {
        "FunctionName": "${TranscriptProcessorFunctionArn}",
        "Payload": {
          "whisperOutputKey.$": "$.outputs.keys.whisperOutputKey",
          "transcribeOutputKey.$": "$.outputs.keys.transcribeOutputKey",
          "processedTranscriptKey.$": "$.outputs.keys.processedTranscriptKey"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "IntervalSeconds": 5,
          "MaxAttempts": 2,
          "BackoffRate": 1.5
        }
      ],
      "Next": "End"
    },
    "End": {
      "Type": "Succeed"
    }
  }
}